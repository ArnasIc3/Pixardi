<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Pixardi</title>

    <!-- Favicon -->
    <link rel="icon" href="~/logo.png" type="image/png">
    <link rel="shortcut icon" href="~/logo.png" type="image/png">
    <link rel="apple-touch-icon" href="~/logo.png">


    <!-- Modular CSS files -->
    <link rel="stylesheet" href="~/css/base.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/layout.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/tools.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/colors.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/cursor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/auth.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/responsive.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modals.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/loading.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/gallery.css" asp-append-version="true" />

    <!-- Render additional styles from views -->
    @await RenderSectionAsync("Styles", required: false)
</head>

<body class="@ViewData["BodyClass"]">
    @if (!ViewContext.RouteData.Values["controller"]?.ToString()?.Equals("Account", StringComparison.OrdinalIgnoreCase)
        == true)
    {
        <!-- Loading Screen -->
        <div id="loadingScreen" class="loading-screen active">
            <div class="loading-content">
                <div class="loading-logo">
                    <div class="pixel-grid">
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                        <div class="pixel"></div>
                    </div>
                </div>
                <h1 class="loading-title">Pixardi</h1>
                <div class="loading-spinner">
                    <div class="spinner-dot"></div>
                    <div class="spinner-dot"></div>
                    <div class="spinner-dot"></div>
                </div>
                <p class="loading-text" id="loadingText">Loading...</p>
            </div>
        </div>
    }

    <!-- Dynamic Navigation -->
    @{
        var controller = ViewContext.RouteData.Values["controller"]?.ToString();
        var action = ViewContext.RouteData.Values["action"]?.ToString();
        var isHomePage = controller?.Equals("Home", StringComparison.OrdinalIgnoreCase) == true && action?.Equals("Index",
        StringComparison.OrdinalIgnoreCase) == true;
        var isGalleryPage = controller?.Equals("Gallery", StringComparison.OrdinalIgnoreCase) == true;
        var isAccountPage = controller?.Equals("Account", StringComparison.OrdinalIgnoreCase) == true;
    }

    @if (!isAccountPage)
    {
        <nav class="main-nav">
            @if (isGalleryPage)
            {
                <!-- On Gallery page - only show Editor button -->
                <a href="@Url.Action("Index", "Home")" class="nav-link editor-link">
                    Editor
                </a>
            }
            else
            {
                <!-- On Home page or other pages - show Gallery button -->
                <a href="@Url.Action("Index", "Gallery")" class="nav-link gallery-link">
                    Gallery
                </a>
            }
        </nav>
    }

    <!-- Authentication Navigation -->
    <nav class="auth-nav">
        @if (User.Identity?.IsAuthenticated == true)
        {
            <div class="user-info">
                <span>Welcome, @(ViewData["UserDisplayName"] ?? User.Identity.Name) !</span>
                <form asp-controller="Account" asp-action="Logout" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="auth-btn logout-btn">Logout</button>
                </form>
            </div>
        }
        else
        {
            <div class="auth-buttons">
                <a asp-controller="Account" asp-action="Login" class="auth-btn login-btn">Login</a>
                <a asp-controller="Account" asp-action="Register" class="auth-btn register-btn">Register</a>
            </div>
        }
    </nav>

    <!-- Modal Overlays -->
    <div id="modalOverlay" class="modal-overlay">
        <!-- Save Project Modal -->
        <div id="saveModal" class="modal">
            <div class="modal-header">
                <h3>Save Project</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <label for="projectName">Project Name:</label>
                <input type="text" id="projectName" placeholder="Enter project name..." />
                <div class="modal-message" id="saveMessage"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="saveCancelBtn">Cancel</button>
                <button class="btn btn-primary" id="saveConfirmBtn">Save</button>
            </div>
        </div>

        <!-- Load Project Modal -->
        <div id="loadModal" class="modal">
            <div class="modal-header">
                <h3>Load Project</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div id="projectsList" class="projects-list">
                    <div class="loading">Loading projects...</div>
                </div>
                <div class="modal-message" id="loadMessage"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="loadCancelBtn">Cancel</button>
                <button class="btn btn-primary" id="loadConfirmBtn" disabled>Load Selected</button>
            </div>
        </div>

        <!-- Download Modal -->
        <div id="downloadModal" class="modal">
            <div class="modal-header">
                <h3>Download PNG</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <label for="fileName">File Name:</label>
                <input type="text" id="fileName" placeholder="pixardi-art" />
                <div class="quality-settings">
                    <label for="scaleSlider">Quality Scale: <span id="scaleValue">20x</span></label>
                    <input type="range" id="scaleSlider" min="5" max="50" value="20" step="5" />
                    <div class="quality-info">
                        Canvas size: <span id="canvasInfo">Loading...</span><br>
                        Output size: <span id="outputInfo">Loading...</span>
                    </div>
                </div>
                <div class="modal-message" id="downloadMessage"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="downloadCancelBtn">Cancel</button>
                <button class="btn btn-primary" id="downloadConfirmBtn">Download</button>
            </div>
        </div>
    </div>

    <main role="main">
        @RenderBody()
    </main>

    <!-- Global scripts for all pages -->
    <script>
        // Global function to clear stuck overlays - available on all pages
        window.clearStuckOverlays = function (force = false) {
            console.log('Clearing stuck overlays...', force ? '(FORCED)' : '');

            // Always clear loading screen
            const loadingElement = document.getElementById('loadingScreen');
            if (loadingElement) {
                loadingElement.classList.remove('active', 'fade-background', 'fade-content', 'auth');
                loadingElement.style.opacity = '0';
                loadingElement.style.visibility = 'hidden';
                loadingElement.style.display = 'none';
                loadingElement.style.zIndex = '-1';
                loadingElement.style.pointerEvents = 'none';
            }

            // Only clear modals if forced or if we're certain they're stuck
            if (force) {
                // Clear all modal overlays (including the main one and Gallery comment modal)
                const allModalOverlays = document.querySelectorAll('.modal-overlay');
                allModalOverlays.forEach(overlay => {
                    overlay.classList.remove('active');
                    overlay.style.display = 'none';
                    overlay.style.opacity = '0';
                    overlay.style.visibility = 'hidden';
                    overlay.style.zIndex = '-1';
                    overlay.style.pointerEvents = 'none';
                    overlay.style.backdropFilter = 'none';
                    overlay.style.filter = 'none';
                });

                // Clear all modals
                const allModals = document.querySelectorAll('.modal');
                allModals.forEach(modal => {
                    modal.classList.remove('active');
                    modal.style.display = 'none';
                });
            }

            // Clear specific Gallery comment modal (this one is often stuck)
            const commentModal = document.getElementById('commentModal');
            if (commentModal && !commentModal.querySelector('.modal.active')) {
                commentModal.classList.remove('active');
                commentModal.style.display = 'none';
                commentModal.style.backdropFilter = 'none';
            }

            // Clear any backdrop filters that might be stuck on body/html
            document.body.style.backdropFilter = 'none';
            document.body.style.filter = 'none';
            document.documentElement.style.backdropFilter = 'none';
            document.documentElement.style.filter = 'none';

            // Clear all elements with backdrop-filter
            const allElements = document.querySelectorAll('*');
            allElements.forEach(element => {
                if (element.style.backdropFilter && element.style.backdropFilter !== 'none') {
                    element.style.backdropFilter = 'none';
                }
                if (element.style.filter && element.style.filter.includes('blur')) {
                    element.style.filter = 'none';
                }
            });

            // Re-enable body scroll if it was disabled
            document.body.style.overflow = '';

            console.log('Cleared stuck overlays and all backdrop filters');
        };

        // Auto-clear on page load for ALL pages after a delay
        document.addEventListener('DOMContentLoaded', function () {
            // Check if we're on different pages
            var isGalleryPage = window.location.pathname.toLowerCase().includes('/gallery');
            var isAccountPage = window.location.pathname.toLowerCase().includes('/account');
            var isHomePage = window.location.pathname === '/' || window.location.pathname.toLowerCase().includes('/home');

            if (isGalleryPage || isAccountPage) {
                // Immediate clear for pages that shouldn't have loading animation
                setTimeout(function () {
                    window.clearStuckOverlays(true); // Force clear for these pages
                }, 100);
            } else if (isHomePage) {
                // For home page, NO auto-clear - let modals work properly
                console.log('Home page: Skipping auto-clear to allow modals to work');
            } else {
                // For any other page, gentle clear after short delay
                setTimeout(function () {
                    window.clearStuckOverlays(false);
                }, 500);
            }
        });
    </script>

    <!-- Global scripts for all pages -->
    <script src="~/js/main.js" asp-append-version="true"></script>
    <script src="~/js/loading.js" asp-append-version="true"></script>
    <script src="~/js/auth.js" asp-append-version="true"></script>
    <script src="~/js/modals.js" asp-append-version="true"></script>
    <script src="~/js/cursor.js" asp-append-version="true"></script>

    @if (isGalleryPage)
    {
        <script src="~/js/gallery.js" asp-append-version="true"></script>
    }

    @if (isHomePage)
    {
        <script src="~/js/drawing.js" asp-append-version="true"></script>
        <script src="~/js/tools.js" asp-append-version="true"></script>
        <script src="~/js/grid.js" asp-append-version="true"></script>
        <script src="~/js/history.js" asp-append-version="true"></script>
        <script src="~/js/state.js" asp-append-version="true"></script>
        <script src="~/js/projects.js" asp-append-version="true"></script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>